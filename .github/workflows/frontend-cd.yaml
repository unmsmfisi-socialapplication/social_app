# This workflow will build a golang project
name: CD Frontend

on:
  push:
    branches:
      - develop
    # Only trigger when changes are made within the 'backend/' directory
    paths:
      - 'frontend/**'

# Define default settings for jobs
defaults:
  run:
    working-directory: ./frontend

env:
  PROJECT_ID: prefab-faculty-399316 # TODO: update Google Cloud project id
  GAR_LOCATION: us-central1 # TODO: update Artifact Registry location
  REPOSITORY: social-app-frontend-repo # TODO: update Artifact Registry repository name
  IMAGES: social-app-frontend-images
  SERVICE: social-app-frontend-service # TODO: update Cloud Run service name
  REGION: us-central1 # TODO: update Cloud Run service region

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: 'Create env file'
        run: |
          echo "${{ secrets.ENV_FILE_FRONTEND }}" > .env

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_DCR_KEY}}
  
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
  
      - name: Use gcloud CLI
        run: gcloud info

      - name: Docker auth
        run: |-
          gcloud auth configure-docker us-central1-docker.pkg.dev
    
      - name: Build and Push Container
        run: |-
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGES }}:${{ github.sha }} .
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGES }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGES }}:${{ github.sha }}
          port: 3000

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
